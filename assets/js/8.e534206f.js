(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{354:function(a,t,e){"use strict";e.r(t);var n=e(42),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"swift-vs-kotlin"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swift-vs-kotlin"}},[a._v("#")]),a._v(" Swift vs Kotlin")]),a._v(" "),e("p",[a._v('Swift和Kotlin作为更加"现代化"的语言，毫无疑问提升了开发原生app的效率，二者旨在与Objective-C和Java互操作，方便"旧"应用的开发进行更新，如果你要从零开始编写一个全新的应用，不要犹豫，选择使用它们，尽情享受它们带来的乐趣。这两个语言有着许多相似之处，让我们来"欣赏"一下吧：')]),a._v(" "),e("h2",{attrs:{id:"语法差异"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语法差异"}},[a._v("#")]),a._v(" 语法差异")]),a._v(" "),e("h3",{attrs:{id:"print"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#print"}},[a._v("#")]),a._v(" print")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('print("Hello, world!")                              //Swift\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('println("Hello, world!")                            //Kotlin\n')])])]),e("h3",{attrs:{id:"变量和常量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变量和常量"}},[a._v("#")]),a._v(" 变量和常量")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var myVariable = 42                                 //Swift\nmyVariable = 50\nlet myConstant = 42\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var myVariable = 42                                 //Kotlin\nmyVariable = 50\nval myConstant = 42\n")])])]),e("h3",{attrs:{id:"显示声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#显示声明"}},[a._v("#")]),a._v(" 显示声明")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let explicitDouble: Double = 70                     //Swift\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val explicitDouble: Double = 70.0                   //Kotlin\n")])])]),e("h3",{attrs:{id:"隐式声明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#隐式声明"}},[a._v("#")]),a._v(" 隐式声明")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let label = "The width is "                         //Swift\nlet width = 94\nlet widthLabel = label + String(width)\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val label = "The width is "                         //Kotlin\nval width = 94\nval widthLabel = label + width\n')])])]),e("h3",{attrs:{id:"字符串插值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字符串插值"}},[a._v("#")]),a._v(" 字符串插值")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let apples = 3                                      //Swift\nlet oranges = 5\nlet fruitSummary = "I have \\(apples + oranges) " + "pieces of fruit."\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val apples = 3                                      //Kotlin\nval oranges = 5\nval fruitSummary = "I have ${apples + oranges} " + "pieces of fruit."\n')])])]),e("h3",{attrs:{id:"可选类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可选类型"}},[a._v("#")]),a._v(" 可选类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var str: String?                                    //Swift\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var str: String?                                    //Kotlin\n")])])]),e("h3",{attrs:{id:"判空"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#判空"}},[a._v("#")]),a._v(" 判空")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('if str != nil {                                     //Swift\n    print("\\(str)")\n}\n//推荐使用\nif let str = str {\n    print("\\(str)")\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('if (str != null) {                                  //Kotlin\n    println("$str")\n}\n//推荐使用\nstr?.let {\n    println("$str")\n}\n')])])]),e("h3",{attrs:{id:"guard"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#guard"}},[a._v("#")]),a._v(" guard")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("guard let str = str else {                          //Swift\n    //do something\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val id = str ?: run {                               //Kotlin\n    //do something\n}\n")])])]),e("h3",{attrs:{id:"可选链式调用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可选链式调用"}},[a._v("#")]),a._v(" 可选链式调用")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let length = str?.count                             //Swift\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val length = str?.length                            //Kotlin\n")])])]),e("h3",{attrs:{id:"强制解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#强制解析"}},[a._v("#")]),a._v(" 强制解析")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let length = str!.count                             //Swift\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val length = str!!.length                           //Kotlin\n")])])]),e("h3",{attrs:{id:"空合运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空合运算符"}},[a._v("#")]),a._v(" 空合运算符")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let length = str?.count ?? 0                        //Swift\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val length = str?.length ?: 0                       //Kotlin\n")])])]),e("h3",{attrs:{id:"半开区间运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#半开区间运算符"}},[a._v("#")]),a._v(" 半开区间运算符")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let names = ["Anna", "Alex", "Brian", "Jack"]       //Swift\nlet count = names.count\nfor i in 0..<count {\n    print("Person \\(i + 1) is called \\(names[i])") \n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val names = arrayOf("Anna", "Alex", "Brian", "Jack")//Kotlin\nval count = names.count()\nfor (i in 0 until count) {\n    println("Person ${i + 1} is called ${names[i]}")\n}\n')])])]),e("h3",{attrs:{id:"闭区间运算符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#闭区间运算符"}},[a._v("#")]),a._v(" 闭区间运算符")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('for index in 1...5 {                                //Swift\n    print("\\(index) times 5 is \\(index * 5)")\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('for (index in 1..5) {                               //Kotlin\n    println("$index times 5 is ${index * 5}")\n}\n')])])]),e("h3",{attrs:{id:"数组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[a._v("#")]),a._v(" 数组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var shoppingList = ["catfish", "water",             //Swift\n    "tulips", "blue paint"]\nshoppingList[1] = "bottle of water"\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val shoppingList = arrayOf("catfish", "water",      //Kotlin\n    "tulips", "blue paint")\nshoppingList[1] = "bottle of water"\n')])])]),e("h3",{attrs:{id:"字典"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字典"}},[a._v("#")]),a._v(" 字典")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('var occupations = [                                 //Swift\n    "Malcolm": "Captain",\n    "Kaylee": "Mechanic",\n]\noccupations["Jayne"] = "Public Relations"\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val occupations = mutableMapOf(                     //Kotlin\n    "Malcolm" to "Captain",\n    "Kaylee" to "Mechanic"\n)\noccupations["Jayne"] = "Public Relations"\n')])])]),e("h3",{attrs:{id:"空集"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空集"}},[a._v("#")]),a._v(" 空集")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("let emptyArray = [String]()                         //Swift\nlet emptyDictionary = [String: Float]()\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val emptyArray = arrayOf<String>()                  //Kotlin\nval emptyMap = mapOf<String, Float>()\n")])])]),e("h3",{attrs:{id:"函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[a._v("#")]),a._v(" 函数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('func greet(_ name: String,_ day: String) -> String {//Swift\n    return "Hello \\(name), today is \\(day)."\n}\ngreet("Bob", "Tuesday")\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('fun greet(name: String, day: String): String {      //Kotlin\n    return "Hello $name, today is $day."\n}\ngreet("Bob", "Tuesday")\n')])])]),e("h3",{attrs:{id:"元组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元组"}},[a._v("#")]),a._v(" 元组")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("func getGasPrices() -> (Double, Double, Double) {   //Swift\n    return (3.59, 3.69, 3.79)\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("data class GasPrices(val a: Double, val b: Double,  //Kotlin\n     val c: Double)\nfun getGasPrices() = GasPrices(3.59, 3.69, 3.79)\n")])])]),e("h3",{attrs:{id:"可变参数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可变参数"}},[a._v("#")]),a._v(" 可变参数")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("func sumOf(_ numbers: Int...) -> Int {              //Swift\n    var sum = 0\n    for number in numbers {\n        sum += number\n    }\n    return sum\n}\nsumOf(42, 597, 12)\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("fun sumOf(vararg numbers: Int): Int {               //Kotlin\n    var sum = 0\n    for (number in numbers) {\n        sum += number\n    }\n    return sum\n}\nsumOf(42, 597, 12)\n\n// sumOf() can also be written in a shorter way:\nfun sumOf(vararg numbers: Int) = numbers.sum()\n")])])]),e("h3",{attrs:{id:"函数类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[a._v("#")]),a._v(" 函数类型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("func makeIncrementer() -> (Int -> Int) {             //Swift\n    func addOne(number: Int) -> Int {\n        return 1 + number\n    }\n    return addOne\n}\nlet increment = makeIncrementer()\nincrement(7)\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("fun makeIncrementer(): (Int) -> Int {               //Kotlin\n    val addOne = fun(number: Int): Int {\n        return 1 + number\n    }\n    return addOne\n}\nval increment = makeIncrementer()\nincrement(7)\n\n// makeIncrementer can also be written in a shorter way:\nfun makeIncrementer() = fun(number: Int) = 1 + number\n")])])]),e("h3",{attrs:{id:"参数名称"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参数名称"}},[a._v("#")]),a._v(" 参数名称")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("func area(width: Int, height: Int) -> Int {         //Swift\n    return width * height\n}\narea(width: 2, height: 3)\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("fun area(width: Int, height: Int) = width * height  //Kotlin\narea(width = 2, height = 3)\n\n// This is also possible with named arguments\narea(2, height = 2)\narea(height = 3, width = 2)\n")])])]),e("h3",{attrs:{id:"声明类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#声明类"}},[a._v("#")]),a._v(" 声明类")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('class Shape {                                       //Swift\n    var numberOfSides = 0\n    func simpleDescription() -> String {\n        return "A shape with \\(numberOfSides) sides."\n    }\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('class Shape {                                       //Kotlin\n    var numberOfSides = 0\n    fun simpleDescription() : String {\n        return "A shape with $numberOfSides sides."\n    }\n}\n')])])]),e("h3",{attrs:{id:"使用类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用类"}},[a._v("#")]),a._v(" 使用类")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var shape = Shape()                                 //Swift\nshape.numberOfSides = 7\nvar shapeDescription = shape.simpleDescription()\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var shape = Shape()                                 //Kotlin\nshape.numberOfSides = 7\nvar shapeDescription = shape.simpleDescription()\n")])])]),e("h3",{attrs:{id:"懒加载"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#懒加载"}},[a._v("#")]),a._v(" 懒加载")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("lazy var shape = Shape()                            //Swift\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("val shape by lazy {Shape()}                         //Kotlin\n")])])]),e("h3",{attrs:{id:"子类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#子类"}},[a._v("#")]),a._v(" 子类")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('class NamedShape {                                  //Swift\n    var numberOfSides: Int = 0\n    let name: String\n\n    init(name: String) {\n        self.name = name\n    }\n\n    func simpleDescription() -> String {\n        return "A shape with \\(numberOfSides) sides."\n    }\n}\n\nclass Square: NamedShape {                          \n    private var sideLength: Double\n\n    init(sideLength: Double, name: String) {\n        self.sideLength = sideLength\n        super.init(name: name)\n        self.numberOfSides = 4\n    }\n\n    func area() -> Double {\n        return sideLength * sideLength\n    }\n\n    override func simpleDescription() -> String {\n        return "A square with sides of length " + String(sideLength) + "."\n    }\n}\n\nlet test = Square(sideLength: 5.2, name: "square")\ntest.area()\ntest.simpleDescription()\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('open class NamedShape(val name: String) {           //Kotlin\n    var numberOfSides = 0\n\n    open fun simpleDescription() =\n        "A shape with $numberOfSides sides."\n}\n\nclass Square(private var sideLength: BigDecimal, name: String) :\n        NamedShape(name) {\n    init {\n        numberOfSides = 4\n    }\n\n    fun area() = sideLength.pow(2)\n\n    override fun simpleDescription() =\n        "A square with sides of length $sideLength."\n}\n\nval test = Square(BigDecimal("5.2"), "square")\ntest.area()\ntest.simpleDescription()\n')])])]),e("h3",{attrs:{id:"类型检查"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#类型检查"}},[a._v("#")]),a._v(" 类型检查")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var movieCount = 0                                  //Swift\nvar songCount = 0\n\nfor item in library {\n    if item is Movie {\n        movieCount += 1\n    } else if item is Song {\n        songCount += 1\n    }\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var movieCount = 0                                  //Kotlin\nvar songCount = 0\n\nfor (item in library) {\n    if (item is Movie) {\n        ++movieCount\n    } else if (item is Song) {\n        ++songCount\n    }\n}\n")])])]),e("h3",{attrs:{id:"模式匹配"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#模式匹配"}},[a._v("#")]),a._v(" 模式匹配")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('let nb = 42                                          //Swift\nswitch nb {\n    case 0...7, 8, 9: print("single digit")\n    case 10: print("double digits")\n    case 11...99: print("double digits")\n    case 100...999: print("triple digits")\n    default: print("four or more digits")\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val nb = 42                                         //Kotlin\nwhen (nb) {\n    in 0..7, 8, 9 -> println("single digit")\n    10 -> println("double digits")\n    in 11..99 -> println("double digits")\n    in 100..999 -> println("triple digits")\n    else -> println("four or more digits")\n}\n')])])]),e("h3",{attrs:{id:"向下转型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#向下转型"}},[a._v("#")]),a._v(" 向下转型")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('for current in someObjects {                        //Swift\n    if let movie = current as? Movie {\n        print("Movie: \'\\(movie.name)\', " +\n            "dir. \\(movie.director)")\n    }\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('for (current in someObjects) {                      //Kotlin\n    if (current is Movie) {\n        println("Movie: \'${current.name}\', " +\n\t    "dir. ${current.director}")\n    }\n}\n')])])]),e("h3",{attrs:{id:"协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协议"}},[a._v("#")]),a._v(" 协议")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('protocol Nameable {                                 //Swift\n    func name() -> String\n}\n\nfunc f<T: Nameable>(x: T) {\n    print("Name is " + x.name())\n}\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('interface Nameable {                                //Kotlin\n    fun name(): String\n}\n\nfun <T: Nameable> f(x: T) {\n    println("Name is " + x.name())\n}\n')])])]),e("h3",{attrs:{id:"扩展"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#扩展"}},[a._v("#")]),a._v(" 扩展")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('extension Double {                                  //Swift\n    var km: Double { return self * 1_000.0 }\n    var m: Double { return self }\n    var cm: Double { return self / 100.0 }\n    var mm: Double { return self / 1_000.0 }\n    var ft: Double { return self / 3.28084 }\n}\nlet oneInch = 25.4.mm\nprint("One inch is \\(oneInch) meters")\n// prints "One inch is 0.0254 meters"\nlet threeFeet = 3.ft\nprint("Three feet is \\(threeFeet) meters")\n')])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val Double.km: Double get() = this * 1000           //Kotlin\nval Double.m: Double get() = this\nval Double.cm: Double get() = this / 100\nval Double.mm: Double get() = this / 1000\nval Double.ft: Double get() = this / 3.28084\n\nval oneInch = 25.4.mm\nprintln("One inch is $oneInch meters")\n// prints "One inch is 0.0254 meters"\nval threeFeet = 3.0.ft\nprintln("Three feet is $threeFeet meters")\n// prints "Three feet is 0.914399970739201 meters"\n')])])]),e("h2",{attrs:{id:"其他区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#其他区别"}},[a._v("#")]),a._v(" 其他区别")]),a._v(" "),e("h3",{attrs:{id:"kotlin数据类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#kotlin数据类"}},[a._v("#")]),a._v(" Kotlin数据类")]),a._v(" "),e("p",[a._v("Kotlin有一个称为数据类的东西，该类在编译时将获得诸如hashCode()，toString()和copy()等方法。可以这样定义：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('data class SampleClass(var a: Int = 0, var b: Int = 0, var c: String = "")\n')])])]),e("p",[a._v("Swift没有数据类或任何等效类。")]),a._v(" "),e("h3",{attrs:{id:"元组-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元组-2"}},[a._v("#")]),a._v(" 元组")]),a._v(" "),e("p",[a._v("Swift具有元组功能，并且可以为元组设定类型别名；\nKotlin具有Pair和Triple工具类，用于呈现2元和3元组对象，并且可以通过data class模拟自定义元组。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//Swift\ntypealias SampleTuple = (var1: String, var2: String, var3: String)\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("//Kotlin\ndata class SampleTuple(val var1: String, val var2: String, val var3: String) \n// Definition of Pair data class Pair<out A, out B> \n// Definition of Triple data class Triple<out A, out B, out C>\n")])])]),e("h3",{attrs:{id:"swift结构体"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#swift结构体"}},[a._v("#")]),a._v(" Swift结构体")]),a._v(" "),e("p",[a._v("Swift Struct和Class之间的区别在于，结构体是值类型，而类是引用类型。可将元组视为隐式定义的Struct：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('struct SampleStruct {\n\tvar a: Int = 0\n\tvar b: Int = 0\n\tvar c: String = ""\n}\n')])])]),e("p",[a._v("Kotlin没有Struct类型。但是，我们可以通过copy函数创建一个新引用：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('val sample = SampleClass(1, 1, "Sample") \nval newSample = sample.copy()\n')])])]),e("p",[a._v("我们可以使用Kotlin数据类和Swift结构体来保存数据。即使一个是引用类型，另一个是值类型。")]),a._v(" "),e("h3",{attrs:{id:"枚举和密封类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#枚举和密封类"}},[a._v("#")]),a._v(" 枚举和密封类")]),a._v(" "),e("p",[a._v("Swift和Kotlin都有枚举。但是声明和匹配方式有很大的区别：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('enum Game {                                         //Swift\n    case regular\n    case baseball(Int, String)\n    case football(Int, Int, String)\n    case basketball(Int, String)\n}\n\nfunc playGame(game: Game) -> Void {\n    switch game {\n    case .regular:\n        print("")\n    case .baseball(let inning, let count):\n        print("\\(inning))  \\(count)")\n    case .football(let down, let yardsToGo, let timeLeft):\n        print("\\(down))  \\(yardsToGo) \\(timeLeft)")\n    case .basketball(let quarter, let timeLeft):\n        print("\\(quarter))  \\(timeLeft)")\n    }\n}\n')])])]),e("p",[a._v("Kotlint通过密封类可以实现枚举。Kotlin的Sealed Class和Swift的Enum之间的唯一区别是，密封类是引用类型，而Swift的Enum是值类型：")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('sealed class Game {                                 //Kotlin\n    object RegularGame: Game()\n    class BaseballGame(val inning: Int, val count: String): Game()\n    class FootballGame(val down: Int, val yardsToGo: Int, val timeLeft: String): Game()\n    class BasketballGame(val quarter: Int, val timeLeft: String): Game()\n}\n\nfun playGame(game: Game) {\n    when(game) {\n        is RegularGame -> println("")\n        is BaseballGame -> println("")\n        is FootballGame -> println("")\n        is BasketballGame -> println("")\n    }\n}\n')])])]),e("h3",{attrs:{id:"隐式解包vs-lateinit"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#隐式解包vs-lateinit"}},[a._v("#")]),a._v(" 隐式解包vs lateinit")]),a._v(" "),e("p",[a._v("Swift还具有隐式解包功能，它定义了一个可选内容，但告诉编译器可以展开该内容，因为后面它将会被值。Kotlin也可以通过lateinit关键字执行相同的操作。需要注意的是，作为开发人员，应尽可能避免使用隐式解包方式。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("var string: String!                                 //Swift\nfunc doBadStuff() {\n   string.doSomething() // Will crash because string doesn’t have a value\n}\n---------------------\nstring = “String”\nfunc doGoodStuff() {\n   string.doSomething() // This is good because string was set.\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('lateinit var string: String                         //Kotlin\nfun doBadStuff() {\n   string.doSomething() // Will crash because string doesn’t have a value\n}\n---------------\nstring = "String"\nfun doGoodStuff() {\n    string.doSomething() // This is good because string was set.\n}\n')])])]),e("h3",{attrs:{id:"协议和接口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协议和接口"}},[a._v("#")]),a._v(" 协议和接口")]),a._v(" "),e("p",[a._v("协议和接口有相同的功能，只是使用了不同的术语。它们定义了一个类在实现接口时必须遵循的一组函数/变量。Kotlin允许在接口的定义中使用泛型，而Swift则可以通过定义关联类型associatedtype来实现。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("protocol SampleProtocol {                           //Swift\n    associatedtype T\n    func get(value: T) -> T\n}\n\nextension SampleProtocol where Self.T == Self  {\n    func get(value: Self) -> Self {\n        // do stuff\n    }\n}\n\nstruct SomeClass: SampleProtocol {\n    func get(value: SomeClass) -> SomeClass {\n        // do stuff\n    }\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("interface SampleInterface<T> {                      //Kotlin\n   fun get(value: T): T {\n       // do stuff\n   }\n}\n\nclass SomeClass: SampleInterface<Int> {\n   override fun get(value: Int): Int {\n       // do stuff\n   }\n}\n")])])]),e("h3",{attrs:{id:"高阶函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[a._v("#")]),a._v(" 高阶函数")]),a._v(" "),e("p",[a._v("高阶函数本质上是接受闭包或函数作为参数并返回新值或另一个函数的函数。使用高阶函数，我们可以对值（例如数组）进行转换，过滤和迭代。")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("func higherOrderFunctions() {                        //Swift\n    let array = [1,2,3,4,5,6,7,8,9,10]\n    // $0 is implicitly defined as the current value of the spot you are at     in an array\n    let mappedArray = array.map {\n        $0 * 2\n    }\n    let filteredArray = array.filter {\n        $0 % 2 == 0\n    }\n    // $0 is not an option because the current value in the closure is now defined as (acc, element)\n    let reducedArray = array.reduce(0) { (acc, element) in\n        return acc + element\n    }\n}\n")])])]),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("fun higherOrderFunctions() {                        //Kotlin\n   val array = arrayOf(1,2,3,4,5,6,7,8,9,10)\n   // it is implicitly defined as the value of the spot you are at     in an array\n   val mappedArray = array.map {\n       it * 2\n   }\n   // result: [2,4,6,8,10,12,14,16,18,20]\n   val filteredArray = array.filter {\n       it % 2 == 0\n   }\n   // result: [2,4,6,8,10]\n   // it is not an option because the current value in the closure is now defined as acc, element\n   val reducedArray = array.reduce { acc, element ->\n       acc + element\n   }\n   // result: 55\n}\n")])])]),e("p",[a._v("参考：")]),a._v(" "),e("ul",[e("li",[a._v("http://nilhcem.com/swift-is-like-kotlin/")]),a._v(" "),e("li",[a._v("https://willowtreeapps.com/ideas/swift-and-kotlin-the-subtle-differences")])]),a._v(" "),e("hr"),a._v(" "),e("blockquote",[e("p",[a._v("本文由"),e("a",{attrs:{href:"https://openwit.net",target:"_blank",rel:"noopener noreferrer"}},[a._v("Openwit"),e("OutboundLink")],1),a._v(" 创作，采用"),e("a",{attrs:{href:"https://creativecommons.org/licenses/by/4.0/",target:"_blank",rel:"noopener noreferrer"}},[a._v("知识共享署名4.0"),e("OutboundLink")],1),a._v("国际许可协议进行许可。\n本站文章除注明转载外，均为本站原创或翻译，转载请注明出处。\n最后更新于: 2020-03-26")])])])}),[],!1,null,null,null);t.default=s.exports}}]);